/* target information */
@import "version.inc";

#product-info  {
	product-name: "libtiff";
	version: "4.0.1";
	original-source-location: "";
	original-source-website: "";
	license: "CUSTOM";
	packager: "Hamish C";
}

test {
    set: {
        COMPILERS="${COMPILERS??vc10}";
        PLAT="${PLAT??x86,x64}";
    };

    default : false;
    uses: release;
    build-command: @"
	    for %%A in (${COMPILERS}) do (
            for %%B in (${PLAT}) do (
                call :testroutine ""%%A"" ""%%B""
            )
        )
        goto :eof

:testroutine
        pushd output\%~1\%~2\Release\bin\
                
        rem TODO: put some tests here
        rem might have to translate some of the unixy tests

        goto passed
:failed
        echo ""Test(s) failed for (%~1,%~2)""
:passed
        popd
        goto :eof
    ";
};

package {
    
    set: COMP="${COMP??vc10}";
    set: PLAT="${PLAT??x86, x64}";
    default : false;
    uses : sign;
    
    targets: { 
        @"copkg\libtiff[vc10]-${package-version}-x86.msi",
        @"copkg\libtiff-dev[vc10]-${package-version}-x86.msi",
        @"copkg\libtiff-dev-common-${package-version}-any.msi",
        @"copkg\libtiff[vc10]-${package-version}-x64.msi",
        @"copkg\libtiff-dev[vc10]-${package-version}-x64.msi"
    };
    
    build-command : @"
        pushd COPKG
        autopackage libtiff-dev-common.autopkg || goto failed
        
        for %%A in (${COMP}) do (
            for %%B in (${PLAT}) do (
                autopackage --COMP=%%A --PLAT=%%B libtiff.autopkg libtiff-dev.autopkg || goto failed
            )
        )
        popd
        ptk update-version
    ";

	clean-command: @"del COPKG\*.msi COPKG\*.wixpdb";
};


update-version {
    default : false;
    
    build-command : @"
        REM auto-increment version.inc file...
        
        pushd COPKG
        setlocal EnableDelayedExpansion
        for /F ""tokens=4,5,6,7  delims=.; "" %%v in (version.inc) do (
            set /a build=%%y + 1
            set VERSTRING=#define { package-version: %%v.%%w.%%x.!build!; }
        )
        echo !VERSTRING! > version.inc
        popd
    ";
}

release {
    set: {
        COMPILERS="${COMPILERS??vc10}";
        PLAT="${PLAT??x86, x64}";
        CONFIG="Release";
    };

    build-command: @"
        for %%A in (${COMPILERS}) do (
            for %%B in (${PLAT}) do (
			    ptk -nologo base --CONFIG=${CONFIG} --COMP=%%A --PLAT=%%B
		    )
        )
    ";
};

sign {
    default : false;
    uses: release;
    build-command: @"simplesigner.exe --nologo --sign output\**.dll output\**.exe
    ";
};

x86 {
    set: PLAT=x86;
    uses: base;
};

x64 {
    set: PLAT=x64;
    uses: base;
};

base {
    set: {
        CONFIG="${CONFIG??Release}";
        COMP="${COMP??vc10}";
        PLAT="${PLAT??x86}";
    };

    compiler:"${COMP}";
    platform:"${PLAT}";
    
    requires: "libjpeg-dev[${COMP}]-8.0.3-${PLAT}";
    requires: "zlib-dev[${COMP}]-1.2.5-${PLAT}";

    targets: { 
		"output\${COMP}\${PLAT}\${CONFIG}\bin\libtiff.dll",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\libtiff.lib",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\libtiff_i.lib",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\bmp2tiff.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\fax2ps.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\fax2tiff.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\gif2tiff.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\pal2rgb.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\ppm2tiff.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\ras2tiff.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\raw2tiff.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\rgb2ycbcr.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\thumbnail.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiff2bw.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiff2pdf.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiff2ps.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiff2rgba.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffcmp.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffcp.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffcrop.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffdither.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffdump.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffinfo.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffmedian.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffset.exe",
        "output\${COMP}\${PLAT}\${CONFIG}\bin\tiffsplit.exe",
	};
	
    build-command:@"
         mkdir output\${COMP}\${PLAT}\${CONFIG}\bin
         REM this makes it so that DLLs can have their own SxS Activation Context in an embedded resource.
		 echo %_CL% | findstr ISOLATION_AWARE || set _CL=%CL% /D ISOLATION_AWARE_ENABLED
         nmake /s /c /f Makefile.vc JPEG_SUPPORT=1 JPEGDIR=%PROGRAMDATA%\libjpeg[${COMP}] JPEG_INCLUDE=-I%PROGRAMDATA%\include\libjpeg JPEG_LIB=%PROGRAMDATA%\lib\${PLAT}\jpeg.lib ZIP_SUPPORT=1 ZLIBDIR=%PROGRAMDATA%\zlib[${COMP}] ZLIB_INCLUDE=-I%PROGRAMDATA%\include\zlib ZLIB_LIB=%PROGRAMDATA%\lib\${PLAT}\zlib1.lib
         copy tools\*.exe output\${COMP}\${PLAT}\${CONFIG}\bin
         copy libtiff\*.dll output\${COMP}\${PLAT}\${CONFIG}\bin
         copy libtiff\*.lib output\${COMP}\${PLAT}\${CONFIG}\bin
         copy libtiff\*.exp output\${COMP}\${PLAT}\${CONFIG}\bin
         pushd tools
         del /S /Q *.obj *.exe *.dll *.lib > nul 2> nul
         popd
         pushd libtiff
         del /S /Q *.obj *.exe *.dll *.lib > nul 2> nul
         popd
         pushd port
         del /S /Q *.obj *.exe *.dll *.lib > nul 2> nul
         popd
    ";
    
    clean-command:@"
       if exist output rmdir /s /q output > nul 2> nul
    ";
};
